// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: report.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "report.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gorynych {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* Report_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Report_reflection_ = NULL;
const ::google::protobuf::Descriptor* Report_Report_Statistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Report_Report_Statistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* Report_Report_Start_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Report_Report_Start_reflection_ = NULL;
const ::google::protobuf::Descriptor* Report_Report_Stop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Report_Report_Stop_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Report_Report_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_report_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_report_2eproto() {
  protobuf_AddDesc_report_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "report.proto");
  GOOGLE_CHECK(file != NULL);
  Report_descriptor_ = file->message_type(0);
  static const int Report_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, report_statistics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, report_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, report_stop_),
  };
  Report_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Report_descriptor_,
      Report::internal_default_instance(),
      Report_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, _has_bits_),
      -1,
      -1,
      sizeof(Report),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, _internal_metadata_));
  Report_Report_Statistics_descriptor_ = Report_descriptor_->nested_type(0);
  static const int Report_Report_Statistics_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_Report_Statistics, sd_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_Report_Statistics, sd_chain_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_Report_Statistics, average_size_sd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_Report_Statistics, average_size_sd_chain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_Report_Statistics, average_latency_sd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_Report_Statistics, average_latency_sd_chain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_Report_Statistics, timestamp_),
  };
  Report_Report_Statistics_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Report_Report_Statistics_descriptor_,
      Report_Report_Statistics::internal_default_instance(),
      Report_Report_Statistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_Report_Statistics, _has_bits_),
      -1,
      -1,
      sizeof(Report_Report_Statistics),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_Report_Statistics, _internal_metadata_));
  Report_Report_Start_descriptor_ = Report_descriptor_->nested_type(1);
  static const int Report_Report_Start_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_Report_Start, start_time_),
  };
  Report_Report_Start_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Report_Report_Start_descriptor_,
      Report_Report_Start::internal_default_instance(),
      Report_Report_Start_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_Report_Start, _has_bits_),
      -1,
      -1,
      sizeof(Report_Report_Start),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_Report_Start, _internal_metadata_));
  Report_Report_Stop_descriptor_ = Report_descriptor_->nested_type(2);
  static const int Report_Report_Stop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_Report_Stop, stop_time_),
  };
  Report_Report_Stop_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Report_Report_Stop_descriptor_,
      Report_Report_Stop::internal_default_instance(),
      Report_Report_Stop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_Report_Stop, _has_bits_),
      -1,
      -1,
      sizeof(Report_Report_Stop),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report_Report_Stop, _internal_metadata_));
  Report_Report_Type_descriptor_ = Report_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_report_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Report_descriptor_, Report::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Report_Report_Statistics_descriptor_, Report_Report_Statistics::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Report_Report_Start_descriptor_, Report_Report_Start::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Report_Report_Stop_descriptor_, Report_Report_Stop::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_report_2eproto() {
  Report_default_instance_.Shutdown();
  delete Report_reflection_;
  Report_Report_Statistics_default_instance_.Shutdown();
  delete Report_Report_Statistics_reflection_;
  Report_Report_Start_default_instance_.Shutdown();
  delete Report_Report_Start_reflection_;
  Report_Report_Stop_default_instance_.Shutdown();
  delete Report_Report_Stop_reflection_;
}

void protobuf_InitDefaults_report_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Report_default_instance_.DefaultConstruct();
  Report_Report_Statistics_default_instance_.DefaultConstruct();
  Report_Report_Start_default_instance_.DefaultConstruct();
  Report_Report_Stop_default_instance_.DefaultConstruct();
  Report_default_instance_.get_mutable()->InitAsDefaultInstance();
  Report_Report_Statistics_default_instance_.get_mutable()->InitAsDefaultInstance();
  Report_Report_Start_default_instance_.get_mutable()->InitAsDefaultInstance();
  Report_Report_Stop_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_report_2eproto_once_);
void protobuf_InitDefaults_report_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_report_2eproto_once_,
                 &protobuf_InitDefaults_report_2eproto_impl);
}
void protobuf_AddDesc_report_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_report_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014report.proto\022\021gorynych.protobuf\"\327\004\n\006Re"
    "port\0223\n\004type\030\001 \002(\0162%.gorynych.protobuf.R"
    "eport.Report_Type\022F\n\021report_statistics\030\002"
    " \001(\0132+.gorynych.protobuf.Report.Report_S"
    "tatistics\022<\n\014report_start\030\003 \001(\0132&.goryny"
    "ch.protobuf.Report.Report_Start\022:\n\013repor"
    "t_stop\030\004 \001(\0132%.gorynych.protobuf.Report."
    "Report_Stop\032\306\001\n\021Report_Statistics\022\020\n\010sd_"
    "count\030\001 \002(\007\022\026\n\016sd_chain_count\030\002 \002(\007\022\027\n\017a"
    "verage_size_sd\030\003 \002(\006\022\035\n\025average_size_sd_"
    "chain\030\004 \002(\006\022\032\n\022average_latency_sd\030\005 \002(\006\022"
    " \n\030average_latency_sd_chain\030\006 \002(\006\022\021\n\ttim"
    "estamp\030\007 \002(\006\032\"\n\014Report_Start\022\022\n\nstart_ti"
    "me\030\001 \002(\006\032 \n\013Report_Stop\022\021\n\tstop_time\030\001 \002"
    "(\006\"G\n\013Report_Type\022\020\n\014REPORT_START\020\000\022\017\n\013R"
    "EPORT_STOP\020\001\022\025\n\021REPORT_STATISTICS\020\002", 635);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "report.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_report_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_report_2eproto_once_);
void protobuf_AddDesc_report_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_report_2eproto_once_,
                 &protobuf_AddDesc_report_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_report_2eproto {
  StaticDescriptorInitializer_report_2eproto() {
    protobuf_AddDesc_report_2eproto();
  }
} static_descriptor_initializer_report_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* Report_Report_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Report_Report_Type_descriptor_;
}
bool Report_Report_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Report_Report_Type Report::REPORT_START;
const Report_Report_Type Report::REPORT_STOP;
const Report_Report_Type Report::REPORT_STATISTICS;
const Report_Report_Type Report::Report_Type_MIN;
const Report_Report_Type Report::Report_Type_MAX;
const int Report::Report_Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Report_Report_Statistics::kSdCountFieldNumber;
const int Report_Report_Statistics::kSdChainCountFieldNumber;
const int Report_Report_Statistics::kAverageSizeSdFieldNumber;
const int Report_Report_Statistics::kAverageSizeSdChainFieldNumber;
const int Report_Report_Statistics::kAverageLatencySdFieldNumber;
const int Report_Report_Statistics::kAverageLatencySdChainFieldNumber;
const int Report_Report_Statistics::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Report_Report_Statistics::Report_Report_Statistics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_report_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:gorynych.protobuf.Report.Report_Statistics)
}

void Report_Report_Statistics::InitAsDefaultInstance() {
}

Report_Report_Statistics::Report_Report_Statistics(const Report_Report_Statistics& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gorynych.protobuf.Report.Report_Statistics)
}

void Report_Report_Statistics::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sd_count_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&sd_count_) + sizeof(timestamp_));
}

Report_Report_Statistics::~Report_Report_Statistics() {
  // @@protoc_insertion_point(destructor:gorynych.protobuf.Report.Report_Statistics)
  SharedDtor();
}

void Report_Report_Statistics::SharedDtor() {
}

void Report_Report_Statistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Report_Report_Statistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Report_Report_Statistics_descriptor_;
}

const Report_Report_Statistics& Report_Report_Statistics::default_instance() {
  protobuf_InitDefaults_report_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Report_Report_Statistics> Report_Report_Statistics_default_instance_;

Report_Report_Statistics* Report_Report_Statistics::New(::google::protobuf::Arena* arena) const {
  Report_Report_Statistics* n = new Report_Report_Statistics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Report_Report_Statistics::Clear() {
// @@protoc_insertion_point(message_clear_start:gorynych.protobuf.Report.Report_Statistics)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Report_Report_Statistics, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Report_Report_Statistics*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sd_count_, timestamp_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Report_Report_Statistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gorynych.protobuf.Report.Report_Statistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 sd_count = 1;
      case 1: {
        if (tag == 13) {
          set_has_sd_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &sd_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_sd_chain_count;
        break;
      }

      // required fixed32 sd_chain_count = 2;
      case 2: {
        if (tag == 21) {
         parse_sd_chain_count:
          set_has_sd_chain_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &sd_chain_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_average_size_sd;
        break;
      }

      // required fixed64 average_size_sd = 3;
      case 3: {
        if (tag == 25) {
         parse_average_size_sd:
          set_has_average_size_sd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &average_size_sd_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_average_size_sd_chain;
        break;
      }

      // required fixed64 average_size_sd_chain = 4;
      case 4: {
        if (tag == 33) {
         parse_average_size_sd_chain:
          set_has_average_size_sd_chain();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &average_size_sd_chain_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_average_latency_sd;
        break;
      }

      // required fixed64 average_latency_sd = 5;
      case 5: {
        if (tag == 41) {
         parse_average_latency_sd:
          set_has_average_latency_sd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &average_latency_sd_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_average_latency_sd_chain;
        break;
      }

      // required fixed64 average_latency_sd_chain = 6;
      case 6: {
        if (tag == 49) {
         parse_average_latency_sd_chain:
          set_has_average_latency_sd_chain();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &average_latency_sd_chain_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_timestamp;
        break;
      }

      // required fixed64 timestamp = 7;
      case 7: {
        if (tag == 57) {
         parse_timestamp:
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gorynych.protobuf.Report.Report_Statistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gorynych.protobuf.Report.Report_Statistics)
  return false;
#undef DO_
}

void Report_Report_Statistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gorynych.protobuf.Report.Report_Statistics)
  // required fixed32 sd_count = 1;
  if (has_sd_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->sd_count(), output);
  }

  // required fixed32 sd_chain_count = 2;
  if (has_sd_chain_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->sd_chain_count(), output);
  }

  // required fixed64 average_size_sd = 3;
  if (has_average_size_sd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->average_size_sd(), output);
  }

  // required fixed64 average_size_sd_chain = 4;
  if (has_average_size_sd_chain()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->average_size_sd_chain(), output);
  }

  // required fixed64 average_latency_sd = 5;
  if (has_average_latency_sd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->average_latency_sd(), output);
  }

  // required fixed64 average_latency_sd_chain = 6;
  if (has_average_latency_sd_chain()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->average_latency_sd_chain(), output);
  }

  // required fixed64 timestamp = 7;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gorynych.protobuf.Report.Report_Statistics)
}

::google::protobuf::uint8* Report_Report_Statistics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gorynych.protobuf.Report.Report_Statistics)
  // required fixed32 sd_count = 1;
  if (has_sd_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->sd_count(), target);
  }

  // required fixed32 sd_chain_count = 2;
  if (has_sd_chain_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->sd_chain_count(), target);
  }

  // required fixed64 average_size_sd = 3;
  if (has_average_size_sd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->average_size_sd(), target);
  }

  // required fixed64 average_size_sd_chain = 4;
  if (has_average_size_sd_chain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->average_size_sd_chain(), target);
  }

  // required fixed64 average_latency_sd = 5;
  if (has_average_latency_sd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->average_latency_sd(), target);
  }

  // required fixed64 average_latency_sd_chain = 6;
  if (has_average_latency_sd_chain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->average_latency_sd_chain(), target);
  }

  // required fixed64 timestamp = 7;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gorynych.protobuf.Report.Report_Statistics)
  return target;
}

size_t Report_Report_Statistics::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gorynych.protobuf.Report.Report_Statistics)
  size_t total_size = 0;

  if (has_sd_count()) {
    // required fixed32 sd_count = 1;
    total_size += 1 + 4;
  }

  if (has_sd_chain_count()) {
    // required fixed32 sd_chain_count = 2;
    total_size += 1 + 4;
  }

  if (has_average_size_sd()) {
    // required fixed64 average_size_sd = 3;
    total_size += 1 + 8;
  }

  if (has_average_size_sd_chain()) {
    // required fixed64 average_size_sd_chain = 4;
    total_size += 1 + 8;
  }

  if (has_average_latency_sd()) {
    // required fixed64 average_latency_sd = 5;
    total_size += 1 + 8;
  }

  if (has_average_latency_sd_chain()) {
    // required fixed64 average_latency_sd_chain = 6;
    total_size += 1 + 8;
  }

  if (has_timestamp()) {
    // required fixed64 timestamp = 7;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Report_Report_Statistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gorynych.protobuf.Report.Report_Statistics)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required fixed32 sd_count = 1;
    total_size += 1 + 4;

    // required fixed32 sd_chain_count = 2;
    total_size += 1 + 4;

    // required fixed64 average_size_sd = 3;
    total_size += 1 + 8;

    // required fixed64 average_size_sd_chain = 4;
    total_size += 1 + 8;

    // required fixed64 average_latency_sd = 5;
    total_size += 1 + 8;

    // required fixed64 average_latency_sd_chain = 6;
    total_size += 1 + 8;

    // required fixed64 timestamp = 7;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Report_Report_Statistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gorynych.protobuf.Report.Report_Statistics)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Report_Report_Statistics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Report_Report_Statistics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gorynych.protobuf.Report.Report_Statistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gorynych.protobuf.Report.Report_Statistics)
    UnsafeMergeFrom(*source);
  }
}

void Report_Report_Statistics::MergeFrom(const Report_Report_Statistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gorynych.protobuf.Report.Report_Statistics)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Report_Report_Statistics::UnsafeMergeFrom(const Report_Report_Statistics& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sd_count()) {
      set_sd_count(from.sd_count());
    }
    if (from.has_sd_chain_count()) {
      set_sd_chain_count(from.sd_chain_count());
    }
    if (from.has_average_size_sd()) {
      set_average_size_sd(from.average_size_sd());
    }
    if (from.has_average_size_sd_chain()) {
      set_average_size_sd_chain(from.average_size_sd_chain());
    }
    if (from.has_average_latency_sd()) {
      set_average_latency_sd(from.average_latency_sd());
    }
    if (from.has_average_latency_sd_chain()) {
      set_average_latency_sd_chain(from.average_latency_sd_chain());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Report_Report_Statistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gorynych.protobuf.Report.Report_Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Report_Report_Statistics::CopyFrom(const Report_Report_Statistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gorynych.protobuf.Report.Report_Statistics)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Report_Report_Statistics::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void Report_Report_Statistics::Swap(Report_Report_Statistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Report_Report_Statistics::InternalSwap(Report_Report_Statistics* other) {
  std::swap(sd_count_, other->sd_count_);
  std::swap(sd_chain_count_, other->sd_chain_count_);
  std::swap(average_size_sd_, other->average_size_sd_);
  std::swap(average_size_sd_chain_, other->average_size_sd_chain_);
  std::swap(average_latency_sd_, other->average_latency_sd_);
  std::swap(average_latency_sd_chain_, other->average_latency_sd_chain_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Report_Report_Statistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Report_Report_Statistics_descriptor_;
  metadata.reflection = Report_Report_Statistics_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Report_Report_Start::kStartTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Report_Report_Start::Report_Report_Start()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_report_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:gorynych.protobuf.Report.Report_Start)
}

void Report_Report_Start::InitAsDefaultInstance() {
}

Report_Report_Start::Report_Report_Start(const Report_Report_Start& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gorynych.protobuf.Report.Report_Start)
}

void Report_Report_Start::SharedCtor() {
  _cached_size_ = 0;
  start_time_ = GOOGLE_ULONGLONG(0);
}

Report_Report_Start::~Report_Report_Start() {
  // @@protoc_insertion_point(destructor:gorynych.protobuf.Report.Report_Start)
  SharedDtor();
}

void Report_Report_Start::SharedDtor() {
}

void Report_Report_Start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Report_Report_Start::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Report_Report_Start_descriptor_;
}

const Report_Report_Start& Report_Report_Start::default_instance() {
  protobuf_InitDefaults_report_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Report_Report_Start> Report_Report_Start_default_instance_;

Report_Report_Start* Report_Report_Start::New(::google::protobuf::Arena* arena) const {
  Report_Report_Start* n = new Report_Report_Start;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Report_Report_Start::Clear() {
// @@protoc_insertion_point(message_clear_start:gorynych.protobuf.Report.Report_Start)
  start_time_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Report_Report_Start::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gorynych.protobuf.Report.Report_Start)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 start_time = 1;
      case 1: {
        if (tag == 9) {
          set_has_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gorynych.protobuf.Report.Report_Start)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gorynych.protobuf.Report.Report_Start)
  return false;
#undef DO_
}

void Report_Report_Start::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gorynych.protobuf.Report.Report_Start)
  // required fixed64 start_time = 1;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->start_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gorynych.protobuf.Report.Report_Start)
}

::google::protobuf::uint8* Report_Report_Start::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gorynych.protobuf.Report.Report_Start)
  // required fixed64 start_time = 1;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->start_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gorynych.protobuf.Report.Report_Start)
  return target;
}

size_t Report_Report_Start::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gorynych.protobuf.Report.Report_Start)
  size_t total_size = 0;

  // required fixed64 start_time = 1;
  if (has_start_time()) {
    total_size += 1 + 8;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Report_Report_Start::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gorynych.protobuf.Report.Report_Start)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Report_Report_Start* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Report_Report_Start>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gorynych.protobuf.Report.Report_Start)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gorynych.protobuf.Report.Report_Start)
    UnsafeMergeFrom(*source);
  }
}

void Report_Report_Start::MergeFrom(const Report_Report_Start& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gorynych.protobuf.Report.Report_Start)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Report_Report_Start::UnsafeMergeFrom(const Report_Report_Start& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Report_Report_Start::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gorynych.protobuf.Report.Report_Start)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Report_Report_Start::CopyFrom(const Report_Report_Start& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gorynych.protobuf.Report.Report_Start)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Report_Report_Start::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Report_Report_Start::Swap(Report_Report_Start* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Report_Report_Start::InternalSwap(Report_Report_Start* other) {
  std::swap(start_time_, other->start_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Report_Report_Start::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Report_Report_Start_descriptor_;
  metadata.reflection = Report_Report_Start_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Report_Report_Stop::kStopTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Report_Report_Stop::Report_Report_Stop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_report_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:gorynych.protobuf.Report.Report_Stop)
}

void Report_Report_Stop::InitAsDefaultInstance() {
}

Report_Report_Stop::Report_Report_Stop(const Report_Report_Stop& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gorynych.protobuf.Report.Report_Stop)
}

void Report_Report_Stop::SharedCtor() {
  _cached_size_ = 0;
  stop_time_ = GOOGLE_ULONGLONG(0);
}

Report_Report_Stop::~Report_Report_Stop() {
  // @@protoc_insertion_point(destructor:gorynych.protobuf.Report.Report_Stop)
  SharedDtor();
}

void Report_Report_Stop::SharedDtor() {
}

void Report_Report_Stop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Report_Report_Stop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Report_Report_Stop_descriptor_;
}

const Report_Report_Stop& Report_Report_Stop::default_instance() {
  protobuf_InitDefaults_report_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Report_Report_Stop> Report_Report_Stop_default_instance_;

Report_Report_Stop* Report_Report_Stop::New(::google::protobuf::Arena* arena) const {
  Report_Report_Stop* n = new Report_Report_Stop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Report_Report_Stop::Clear() {
// @@protoc_insertion_point(message_clear_start:gorynych.protobuf.Report.Report_Stop)
  stop_time_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Report_Report_Stop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gorynych.protobuf.Report.Report_Stop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 stop_time = 1;
      case 1: {
        if (tag == 9) {
          set_has_stop_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &stop_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gorynych.protobuf.Report.Report_Stop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gorynych.protobuf.Report.Report_Stop)
  return false;
#undef DO_
}

void Report_Report_Stop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gorynych.protobuf.Report.Report_Stop)
  // required fixed64 stop_time = 1;
  if (has_stop_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->stop_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gorynych.protobuf.Report.Report_Stop)
}

::google::protobuf::uint8* Report_Report_Stop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gorynych.protobuf.Report.Report_Stop)
  // required fixed64 stop_time = 1;
  if (has_stop_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->stop_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gorynych.protobuf.Report.Report_Stop)
  return target;
}

size_t Report_Report_Stop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gorynych.protobuf.Report.Report_Stop)
  size_t total_size = 0;

  // required fixed64 stop_time = 1;
  if (has_stop_time()) {
    total_size += 1 + 8;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Report_Report_Stop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gorynych.protobuf.Report.Report_Stop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Report_Report_Stop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Report_Report_Stop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gorynych.protobuf.Report.Report_Stop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gorynych.protobuf.Report.Report_Stop)
    UnsafeMergeFrom(*source);
  }
}

void Report_Report_Stop::MergeFrom(const Report_Report_Stop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gorynych.protobuf.Report.Report_Stop)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Report_Report_Stop::UnsafeMergeFrom(const Report_Report_Stop& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stop_time()) {
      set_stop_time(from.stop_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Report_Report_Stop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gorynych.protobuf.Report.Report_Stop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Report_Report_Stop::CopyFrom(const Report_Report_Stop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gorynych.protobuf.Report.Report_Stop)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Report_Report_Stop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Report_Report_Stop::Swap(Report_Report_Stop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Report_Report_Stop::InternalSwap(Report_Report_Stop* other) {
  std::swap(stop_time_, other->stop_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Report_Report_Stop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Report_Report_Stop_descriptor_;
  metadata.reflection = Report_Report_Stop_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Report::kTypeFieldNumber;
const int Report::kReportStatisticsFieldNumber;
const int Report::kReportStartFieldNumber;
const int Report::kReportStopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Report::Report()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_report_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:gorynych.protobuf.Report)
}

void Report::InitAsDefaultInstance() {
  report_statistics_ = const_cast< ::gorynych::protobuf::Report_Report_Statistics*>(
      ::gorynych::protobuf::Report_Report_Statistics::internal_default_instance());
  report_start_ = const_cast< ::gorynych::protobuf::Report_Report_Start*>(
      ::gorynych::protobuf::Report_Report_Start::internal_default_instance());
  report_stop_ = const_cast< ::gorynych::protobuf::Report_Report_Stop*>(
      ::gorynych::protobuf::Report_Report_Stop::internal_default_instance());
}

Report::Report(const Report& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gorynych.protobuf.Report)
}

void Report::SharedCtor() {
  _cached_size_ = 0;
  report_statistics_ = NULL;
  report_start_ = NULL;
  report_stop_ = NULL;
  type_ = 0;
}

Report::~Report() {
  // @@protoc_insertion_point(destructor:gorynych.protobuf.Report)
  SharedDtor();
}

void Report::SharedDtor() {
  if (this != &Report_default_instance_.get()) {
    delete report_statistics_;
    delete report_start_;
    delete report_stop_;
  }
}

void Report::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Report::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Report_descriptor_;
}

const Report& Report::default_instance() {
  protobuf_InitDefaults_report_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Report> Report_default_instance_;

Report* Report::New(::google::protobuf::Arena* arena) const {
  Report* n = new Report;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Report::Clear() {
// @@protoc_insertion_point(message_clear_start:gorynych.protobuf.Report)
  if (_has_bits_[0 / 32] & 15u) {
    type_ = 0;
    if (has_report_statistics()) {
      if (report_statistics_ != NULL) report_statistics_->::gorynych::protobuf::Report_Report_Statistics::Clear();
    }
    if (has_report_start()) {
      if (report_start_ != NULL) report_start_->::gorynych::protobuf::Report_Report_Start::Clear();
    }
    if (has_report_stop()) {
      if (report_stop_ != NULL) report_stop_->::gorynych::protobuf::Report_Report_Stop::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gorynych.protobuf.Report)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gorynych.protobuf.Report.Report_Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gorynych::protobuf::Report_Report_Type_IsValid(value)) {
            set_type(static_cast< ::gorynych::protobuf::Report_Report_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_report_statistics;
        break;
      }

      // optional .gorynych.protobuf.Report.Report_Statistics report_statistics = 2;
      case 2: {
        if (tag == 18) {
         parse_report_statistics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_report_statistics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_report_start;
        break;
      }

      // optional .gorynych.protobuf.Report.Report_Start report_start = 3;
      case 3: {
        if (tag == 26) {
         parse_report_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_report_start()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_report_stop;
        break;
      }

      // optional .gorynych.protobuf.Report.Report_Stop report_stop = 4;
      case 4: {
        if (tag == 34) {
         parse_report_stop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_report_stop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gorynych.protobuf.Report)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gorynych.protobuf.Report)
  return false;
#undef DO_
}

void Report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gorynych.protobuf.Report)
  // required .gorynych.protobuf.Report.Report_Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .gorynych.protobuf.Report.Report_Statistics report_statistics = 2;
  if (has_report_statistics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->report_statistics_, output);
  }

  // optional .gorynych.protobuf.Report.Report_Start report_start = 3;
  if (has_report_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->report_start_, output);
  }

  // optional .gorynych.protobuf.Report.Report_Stop report_stop = 4;
  if (has_report_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->report_stop_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gorynych.protobuf.Report)
}

::google::protobuf::uint8* Report::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gorynych.protobuf.Report)
  // required .gorynych.protobuf.Report.Report_Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .gorynych.protobuf.Report.Report_Statistics report_statistics = 2;
  if (has_report_statistics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->report_statistics_, false, target);
  }

  // optional .gorynych.protobuf.Report.Report_Start report_start = 3;
  if (has_report_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->report_start_, false, target);
  }

  // optional .gorynych.protobuf.Report.Report_Stop report_stop = 4;
  if (has_report_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->report_stop_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gorynych.protobuf.Report)
  return target;
}

size_t Report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gorynych.protobuf.Report)
  size_t total_size = 0;

  // required .gorynych.protobuf.Report.Report_Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional .gorynych.protobuf.Report.Report_Statistics report_statistics = 2;
    if (has_report_statistics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->report_statistics_);
    }

    // optional .gorynych.protobuf.Report.Report_Start report_start = 3;
    if (has_report_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->report_start_);
    }

    // optional .gorynych.protobuf.Report.Report_Stop report_stop = 4;
    if (has_report_stop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->report_stop_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Report::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gorynych.protobuf.Report)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Report* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Report>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gorynych.protobuf.Report)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gorynych.protobuf.Report)
    UnsafeMergeFrom(*source);
  }
}

void Report::MergeFrom(const Report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gorynych.protobuf.Report)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Report::UnsafeMergeFrom(const Report& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_report_statistics()) {
      mutable_report_statistics()->::gorynych::protobuf::Report_Report_Statistics::MergeFrom(from.report_statistics());
    }
    if (from.has_report_start()) {
      mutable_report_start()->::gorynych::protobuf::Report_Report_Start::MergeFrom(from.report_start());
    }
    if (from.has_report_stop()) {
      mutable_report_stop()->::gorynych::protobuf::Report_Report_Stop::MergeFrom(from.report_stop());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Report::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gorynych.protobuf.Report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Report::CopyFrom(const Report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gorynych.protobuf.Report)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Report::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_report_statistics()) {
    if (!this->report_statistics_->IsInitialized()) return false;
  }
  if (has_report_start()) {
    if (!this->report_start_->IsInitialized()) return false;
  }
  if (has_report_stop()) {
    if (!this->report_stop_->IsInitialized()) return false;
  }
  return true;
}

void Report::Swap(Report* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Report::InternalSwap(Report* other) {
  std::swap(type_, other->type_);
  std::swap(report_statistics_, other->report_statistics_);
  std::swap(report_start_, other->report_start_);
  std::swap(report_stop_, other->report_stop_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Report::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Report_descriptor_;
  metadata.reflection = Report_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Report_Report_Statistics

// required fixed32 sd_count = 1;
bool Report_Report_Statistics::has_sd_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Report_Report_Statistics::set_has_sd_count() {
  _has_bits_[0] |= 0x00000001u;
}
void Report_Report_Statistics::clear_has_sd_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void Report_Report_Statistics::clear_sd_count() {
  sd_count_ = 0u;
  clear_has_sd_count();
}
::google::protobuf::uint32 Report_Report_Statistics::sd_count() const {
  // @@protoc_insertion_point(field_get:gorynych.protobuf.Report.Report_Statistics.sd_count)
  return sd_count_;
}
void Report_Report_Statistics::set_sd_count(::google::protobuf::uint32 value) {
  set_has_sd_count();
  sd_count_ = value;
  // @@protoc_insertion_point(field_set:gorynych.protobuf.Report.Report_Statistics.sd_count)
}

// required fixed32 sd_chain_count = 2;
bool Report_Report_Statistics::has_sd_chain_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Report_Report_Statistics::set_has_sd_chain_count() {
  _has_bits_[0] |= 0x00000002u;
}
void Report_Report_Statistics::clear_has_sd_chain_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void Report_Report_Statistics::clear_sd_chain_count() {
  sd_chain_count_ = 0u;
  clear_has_sd_chain_count();
}
::google::protobuf::uint32 Report_Report_Statistics::sd_chain_count() const {
  // @@protoc_insertion_point(field_get:gorynych.protobuf.Report.Report_Statistics.sd_chain_count)
  return sd_chain_count_;
}
void Report_Report_Statistics::set_sd_chain_count(::google::protobuf::uint32 value) {
  set_has_sd_chain_count();
  sd_chain_count_ = value;
  // @@protoc_insertion_point(field_set:gorynych.protobuf.Report.Report_Statistics.sd_chain_count)
}

// required fixed64 average_size_sd = 3;
bool Report_Report_Statistics::has_average_size_sd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Report_Report_Statistics::set_has_average_size_sd() {
  _has_bits_[0] |= 0x00000004u;
}
void Report_Report_Statistics::clear_has_average_size_sd() {
  _has_bits_[0] &= ~0x00000004u;
}
void Report_Report_Statistics::clear_average_size_sd() {
  average_size_sd_ = GOOGLE_ULONGLONG(0);
  clear_has_average_size_sd();
}
::google::protobuf::uint64 Report_Report_Statistics::average_size_sd() const {
  // @@protoc_insertion_point(field_get:gorynych.protobuf.Report.Report_Statistics.average_size_sd)
  return average_size_sd_;
}
void Report_Report_Statistics::set_average_size_sd(::google::protobuf::uint64 value) {
  set_has_average_size_sd();
  average_size_sd_ = value;
  // @@protoc_insertion_point(field_set:gorynych.protobuf.Report.Report_Statistics.average_size_sd)
}

// required fixed64 average_size_sd_chain = 4;
bool Report_Report_Statistics::has_average_size_sd_chain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Report_Report_Statistics::set_has_average_size_sd_chain() {
  _has_bits_[0] |= 0x00000008u;
}
void Report_Report_Statistics::clear_has_average_size_sd_chain() {
  _has_bits_[0] &= ~0x00000008u;
}
void Report_Report_Statistics::clear_average_size_sd_chain() {
  average_size_sd_chain_ = GOOGLE_ULONGLONG(0);
  clear_has_average_size_sd_chain();
}
::google::protobuf::uint64 Report_Report_Statistics::average_size_sd_chain() const {
  // @@protoc_insertion_point(field_get:gorynych.protobuf.Report.Report_Statistics.average_size_sd_chain)
  return average_size_sd_chain_;
}
void Report_Report_Statistics::set_average_size_sd_chain(::google::protobuf::uint64 value) {
  set_has_average_size_sd_chain();
  average_size_sd_chain_ = value;
  // @@protoc_insertion_point(field_set:gorynych.protobuf.Report.Report_Statistics.average_size_sd_chain)
}

// required fixed64 average_latency_sd = 5;
bool Report_Report_Statistics::has_average_latency_sd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Report_Report_Statistics::set_has_average_latency_sd() {
  _has_bits_[0] |= 0x00000010u;
}
void Report_Report_Statistics::clear_has_average_latency_sd() {
  _has_bits_[0] &= ~0x00000010u;
}
void Report_Report_Statistics::clear_average_latency_sd() {
  average_latency_sd_ = GOOGLE_ULONGLONG(0);
  clear_has_average_latency_sd();
}
::google::protobuf::uint64 Report_Report_Statistics::average_latency_sd() const {
  // @@protoc_insertion_point(field_get:gorynych.protobuf.Report.Report_Statistics.average_latency_sd)
  return average_latency_sd_;
}
void Report_Report_Statistics::set_average_latency_sd(::google::protobuf::uint64 value) {
  set_has_average_latency_sd();
  average_latency_sd_ = value;
  // @@protoc_insertion_point(field_set:gorynych.protobuf.Report.Report_Statistics.average_latency_sd)
}

// required fixed64 average_latency_sd_chain = 6;
bool Report_Report_Statistics::has_average_latency_sd_chain() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Report_Report_Statistics::set_has_average_latency_sd_chain() {
  _has_bits_[0] |= 0x00000020u;
}
void Report_Report_Statistics::clear_has_average_latency_sd_chain() {
  _has_bits_[0] &= ~0x00000020u;
}
void Report_Report_Statistics::clear_average_latency_sd_chain() {
  average_latency_sd_chain_ = GOOGLE_ULONGLONG(0);
  clear_has_average_latency_sd_chain();
}
::google::protobuf::uint64 Report_Report_Statistics::average_latency_sd_chain() const {
  // @@protoc_insertion_point(field_get:gorynych.protobuf.Report.Report_Statistics.average_latency_sd_chain)
  return average_latency_sd_chain_;
}
void Report_Report_Statistics::set_average_latency_sd_chain(::google::protobuf::uint64 value) {
  set_has_average_latency_sd_chain();
  average_latency_sd_chain_ = value;
  // @@protoc_insertion_point(field_set:gorynych.protobuf.Report.Report_Statistics.average_latency_sd_chain)
}

// required fixed64 timestamp = 7;
bool Report_Report_Statistics::has_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Report_Report_Statistics::set_has_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
void Report_Report_Statistics::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
void Report_Report_Statistics::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 Report_Report_Statistics::timestamp() const {
  // @@protoc_insertion_point(field_get:gorynych.protobuf.Report.Report_Statistics.timestamp)
  return timestamp_;
}
void Report_Report_Statistics::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:gorynych.protobuf.Report.Report_Statistics.timestamp)
}

inline const Report_Report_Statistics* Report_Report_Statistics::internal_default_instance() {
  return &Report_Report_Statistics_default_instance_.get();
}
// -------------------------------------------------------------------

// Report_Report_Start

// required fixed64 start_time = 1;
bool Report_Report_Start::has_start_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Report_Report_Start::set_has_start_time() {
  _has_bits_[0] |= 0x00000001u;
}
void Report_Report_Start::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void Report_Report_Start::clear_start_time() {
  start_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_time();
}
::google::protobuf::uint64 Report_Report_Start::start_time() const {
  // @@protoc_insertion_point(field_get:gorynych.protobuf.Report.Report_Start.start_time)
  return start_time_;
}
void Report_Report_Start::set_start_time(::google::protobuf::uint64 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:gorynych.protobuf.Report.Report_Start.start_time)
}

inline const Report_Report_Start* Report_Report_Start::internal_default_instance() {
  return &Report_Report_Start_default_instance_.get();
}
// -------------------------------------------------------------------

// Report_Report_Stop

// required fixed64 stop_time = 1;
bool Report_Report_Stop::has_stop_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Report_Report_Stop::set_has_stop_time() {
  _has_bits_[0] |= 0x00000001u;
}
void Report_Report_Stop::clear_has_stop_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void Report_Report_Stop::clear_stop_time() {
  stop_time_ = GOOGLE_ULONGLONG(0);
  clear_has_stop_time();
}
::google::protobuf::uint64 Report_Report_Stop::stop_time() const {
  // @@protoc_insertion_point(field_get:gorynych.protobuf.Report.Report_Stop.stop_time)
  return stop_time_;
}
void Report_Report_Stop::set_stop_time(::google::protobuf::uint64 value) {
  set_has_stop_time();
  stop_time_ = value;
  // @@protoc_insertion_point(field_set:gorynych.protobuf.Report.Report_Stop.stop_time)
}

inline const Report_Report_Stop* Report_Report_Stop::internal_default_instance() {
  return &Report_Report_Stop_default_instance_.get();
}
// -------------------------------------------------------------------

// Report

// required .gorynych.protobuf.Report.Report_Type type = 1;
bool Report::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Report::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Report::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Report::clear_type() {
  type_ = 0;
  clear_has_type();
}
::gorynych::protobuf::Report_Report_Type Report::type() const {
  // @@protoc_insertion_point(field_get:gorynych.protobuf.Report.type)
  return static_cast< ::gorynych::protobuf::Report_Report_Type >(type_);
}
void Report::set_type(::gorynych::protobuf::Report_Report_Type value) {
  assert(::gorynych::protobuf::Report_Report_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:gorynych.protobuf.Report.type)
}

// optional .gorynych.protobuf.Report.Report_Statistics report_statistics = 2;
bool Report::has_report_statistics() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Report::set_has_report_statistics() {
  _has_bits_[0] |= 0x00000002u;
}
void Report::clear_has_report_statistics() {
  _has_bits_[0] &= ~0x00000002u;
}
void Report::clear_report_statistics() {
  if (report_statistics_ != NULL) report_statistics_->::gorynych::protobuf::Report_Report_Statistics::Clear();
  clear_has_report_statistics();
}
const ::gorynych::protobuf::Report_Report_Statistics& Report::report_statistics() const {
  // @@protoc_insertion_point(field_get:gorynych.protobuf.Report.report_statistics)
  return report_statistics_ != NULL ? *report_statistics_
                         : *::gorynych::protobuf::Report_Report_Statistics::internal_default_instance();
}
::gorynych::protobuf::Report_Report_Statistics* Report::mutable_report_statistics() {
  set_has_report_statistics();
  if (report_statistics_ == NULL) {
    report_statistics_ = new ::gorynych::protobuf::Report_Report_Statistics;
  }
  // @@protoc_insertion_point(field_mutable:gorynych.protobuf.Report.report_statistics)
  return report_statistics_;
}
::gorynych::protobuf::Report_Report_Statistics* Report::release_report_statistics() {
  // @@protoc_insertion_point(field_release:gorynych.protobuf.Report.report_statistics)
  clear_has_report_statistics();
  ::gorynych::protobuf::Report_Report_Statistics* temp = report_statistics_;
  report_statistics_ = NULL;
  return temp;
}
void Report::set_allocated_report_statistics(::gorynych::protobuf::Report_Report_Statistics* report_statistics) {
  delete report_statistics_;
  report_statistics_ = report_statistics;
  if (report_statistics) {
    set_has_report_statistics();
  } else {
    clear_has_report_statistics();
  }
  // @@protoc_insertion_point(field_set_allocated:gorynych.protobuf.Report.report_statistics)
}

// optional .gorynych.protobuf.Report.Report_Start report_start = 3;
bool Report::has_report_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Report::set_has_report_start() {
  _has_bits_[0] |= 0x00000004u;
}
void Report::clear_has_report_start() {
  _has_bits_[0] &= ~0x00000004u;
}
void Report::clear_report_start() {
  if (report_start_ != NULL) report_start_->::gorynych::protobuf::Report_Report_Start::Clear();
  clear_has_report_start();
}
const ::gorynych::protobuf::Report_Report_Start& Report::report_start() const {
  // @@protoc_insertion_point(field_get:gorynych.protobuf.Report.report_start)
  return report_start_ != NULL ? *report_start_
                         : *::gorynych::protobuf::Report_Report_Start::internal_default_instance();
}
::gorynych::protobuf::Report_Report_Start* Report::mutable_report_start() {
  set_has_report_start();
  if (report_start_ == NULL) {
    report_start_ = new ::gorynych::protobuf::Report_Report_Start;
  }
  // @@protoc_insertion_point(field_mutable:gorynych.protobuf.Report.report_start)
  return report_start_;
}
::gorynych::protobuf::Report_Report_Start* Report::release_report_start() {
  // @@protoc_insertion_point(field_release:gorynych.protobuf.Report.report_start)
  clear_has_report_start();
  ::gorynych::protobuf::Report_Report_Start* temp = report_start_;
  report_start_ = NULL;
  return temp;
}
void Report::set_allocated_report_start(::gorynych::protobuf::Report_Report_Start* report_start) {
  delete report_start_;
  report_start_ = report_start;
  if (report_start) {
    set_has_report_start();
  } else {
    clear_has_report_start();
  }
  // @@protoc_insertion_point(field_set_allocated:gorynych.protobuf.Report.report_start)
}

// optional .gorynych.protobuf.Report.Report_Stop report_stop = 4;
bool Report::has_report_stop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Report::set_has_report_stop() {
  _has_bits_[0] |= 0x00000008u;
}
void Report::clear_has_report_stop() {
  _has_bits_[0] &= ~0x00000008u;
}
void Report::clear_report_stop() {
  if (report_stop_ != NULL) report_stop_->::gorynych::protobuf::Report_Report_Stop::Clear();
  clear_has_report_stop();
}
const ::gorynych::protobuf::Report_Report_Stop& Report::report_stop() const {
  // @@protoc_insertion_point(field_get:gorynych.protobuf.Report.report_stop)
  return report_stop_ != NULL ? *report_stop_
                         : *::gorynych::protobuf::Report_Report_Stop::internal_default_instance();
}
::gorynych::protobuf::Report_Report_Stop* Report::mutable_report_stop() {
  set_has_report_stop();
  if (report_stop_ == NULL) {
    report_stop_ = new ::gorynych::protobuf::Report_Report_Stop;
  }
  // @@protoc_insertion_point(field_mutable:gorynych.protobuf.Report.report_stop)
  return report_stop_;
}
::gorynych::protobuf::Report_Report_Stop* Report::release_report_stop() {
  // @@protoc_insertion_point(field_release:gorynych.protobuf.Report.report_stop)
  clear_has_report_stop();
  ::gorynych::protobuf::Report_Report_Stop* temp = report_stop_;
  report_stop_ = NULL;
  return temp;
}
void Report::set_allocated_report_stop(::gorynych::protobuf::Report_Report_Stop* report_stop) {
  delete report_stop_;
  report_stop_ = report_stop;
  if (report_stop) {
    set_has_report_stop();
  } else {
    clear_has_report_stop();
  }
  // @@protoc_insertion_point(field_set_allocated:gorynych.protobuf.Report.report_stop)
}

inline const Report* Report::internal_default_instance() {
  return &Report_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace gorynych

// @@protoc_insertion_point(global_scope)
